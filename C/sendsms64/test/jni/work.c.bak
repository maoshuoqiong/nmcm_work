#include <stdio.h>  
#include <stdlib.h>  
#include <unistd.h>  
#include <stdint.h>
#include <android/log.h>
#include <jni.h>
#include <dlfcn.h>

#define  LOGI(fmt, args...) \
    __android_log_print( ANDROID_LOG_INFO, "HOOKTEST", fmt, ##args)

#define  LOGD(fmt, args...) \
    __android_log_print( ANDROID_LOG_DEBUG, "HOOKTEST", fmt, ##args)

#define  LOGE(fmt, args...) \
    __android_log_print( ANDROID_LOG_ERROR, "HOOKTEST", fmt, ##args)

#ifdef __cplusplus
extern "C" {
#endif

typedef jint JNI_GetCreatedJavaVMs_Method(JavaVM** , jsize, jsize* );
typedef jint JNI_CreateJavaVM_Method(JavaVM** , JNIEnv**, void* );
typedef jint DestroyJavaVM_Method(JavaVM*);

JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM* vm, void* reserved)
{
	LOGE("JNI_OnLoad,vm[%p]\n",vm);
	return 0;
}

JNIEXPORT void JNICALL JNI_OnUnload(JavaVM* vm, void* reserved)
{
	LOGE("JNI_OnUnLoad,vm[%p]\n",vm);
}

static void* mydlsym(void *hand, const char *name)
{
    void* ret = dlsym(hand, name);
    LOGE("%s = %p\n", name, ret);
    return ret;
}


int sendTextMessage(JNIEnv* p_env,const char * number,const char * content){
	JNIEnv* env = p_env;
	int ret =-1;
	LOGE("enter send text Message");
	if (env==NULL) {
		LOGE("get java env failed .");
		return ret;
	}
	
	LOGE("enter send text Message 001");//leo test
	jstring jnumber = (*env)->NewStringUTF(env,number);
	jstring jcontent = (*env)->NewStringUTF(env,content);
	
	do{
	/*
		LOGE("enter send text Message 002");//leo test
		jclass c_buildversion = (*env)->FindClass(env,"android/os/Build$VERSION");
		if (c_buildversion==NULL){
			LOGE("get  class  build version failed ");
			break;
		}
		LOGE("enter send text Message 002.5");//leo test
		jfieldID f_getversioncode =(*env)->GetStaticFieldID(env,c_buildversion,"SDK_INT", "I");
		if (f_getversioncode==NULL) {
			LOGE("get  field  sdk_init failed ");
			break;
		}
		
		LOGE("enter send text Message 003");//leo test
		int  version = (*env)->GetStaticIntField(env,c_buildversion, f_getversioncode);
		LOGE("android version:%d",version);

	*/
		int version = 22;
		
		jclass phone_factory_class = (*env)->FindClass(env,"com/android/internal/telephony/PhoneFactory");
		if(phone_factory_class==NULL){
			LOGE("get PhoneFactory class id failed ");
			break;
		}
		
		jmethodID get_phone_method = (*env)->GetStaticMethodID(env,phone_factory_class,"getDefaultPhone","()Lcom/android/internal/telephony/Phone;");
		
		if (get_phone_method==NULL) {
			LOGE("get phone Method failed");
			break;
		}
		
		LOGE("enter send text Message 004");//leo test
		jobject phone_object = (*env)->CallStaticObjectMethod(env,phone_factory_class,get_phone_method);
		if (phone_object == NULL) {
			LOGE("get phone object failed");
			break;
		}
		
		jclass phone_class = (*env)->FindClass(env,"com/android/internal/telephony/Phone");
		if (phone_class==NULL) {
			LOGE("get phone class failed");
			break;
		}
		
		jmethodID get_phone_type_method= (*env)->GetMethodID(env,phone_class,"getPhoneType","()I");
		if(get_phone_type_method==NULL){
			LOGE("get get_phone_type_method failed");
			break;
		}
		
		LOGE("enter send text Message 005");//leo test
		int phone_type = (*env)->CallIntMethod(env,phone_object,get_phone_type_method);
		LOGE("phone type : %d",phone_type);
		jclass c_phoneproxy = (*env)->FindClass(env,"com/android/internal/telephony/PhoneProxy");
		if (c_phoneproxy==NULL) {
			LOGE("get  class  phoneproxy failed");
			break;
		}
		jmethodID m_get_activity_phone= (*env)->GetMethodID(env,c_phoneproxy,"getActivePhone","()Lcom/android/internal/telephony/Phone;");
		if(m_get_activity_phone==NULL){
			LOGE("get method getActivityPhone failed");
			break;
		}
		jobject o_activity_phone = (*env)->CallObjectMethod(env,phone_object,m_get_activity_phone);
		if (o_activity_phone==NULL) {
			LOGE("get object  activity phone failed");
			break;
		}
		
		jclass c_phonebase = (*env)->FindClass(env,"com/android/internal/telephony/PhoneBase");
		if (c_phonebase==NULL) {
			LOGE("get class phone base  failed");
			break;
		}
		
		jfieldID f_mci=NULL;
		if (version<18){
			
			f_mci=(*env)->GetFieldID(env,c_phonebase, "mCM", "Lcom/android/internal/telephony/CommandsInterface;");
			
		}else{
			f_mci=(*env)->GetFieldID(env,c_phonebase, "mCi", "Lcom/android/internal/telephony/CommandsInterface;");
		}
		if(f_mci==NULL){
			LOGE("get field  mci  failed");
			break;
		}
		jobject o_mci= (*env)->GetObjectField(env,o_activity_phone, f_mci);
		
		if (o_mci==NULL) {
			LOGE("get object  mci  failed");
			break;
		}
		
		if (phone_type==0){
			LOGE("phone type is 0 ,exit");
			break;
			
		}else if (phone_type==1){
			LOGE("phone type is GSM");
			jclass c_smsmessage= (*env)->FindClass(env,"com/android/internal/telephony/gsm/SmsMessage");
			if (c_smsmessage==NULL) {
				LOGE("GSM, find class c_smsmessage failed");
				break;
			}
			jmethodID m_getSubmirPdu = (*env)->GetStaticMethodID(env,c_smsmessage,"getSubmitPdu","(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Z)Lcom/android/internal/telephony/gsm/SmsMessage$SubmitPdu;");
			if (m_getSubmirPdu==NULL){
				LOGE("GSM, m_getSubmitPdu failed");
				break;
			}
			jobject pdu = (*env)->CallStaticObjectMethod(env,c_smsmessage,m_getSubmirPdu,NULL,jnumber,jcontent,0);
			if(pdu==NULL){
				LOGE("GSM call getSubmitPdu return NULL");
				break;
			}
			jclass c_submitpdu = (*env)->FindClass(env,"com/android/internal/telephony/gsm/SmsMessage$SubmitPdu");
			if(c_submitpdu==NULL){
				LOGE("GSM find class SubmitPdu return NULL");
				break;
			}
			jfieldID f_encodedMessage=(*env)->GetFieldID(env,c_submitpdu, "encodedMessage", "[B");
			if(f_encodedMessage==NULL){
				LOGE("GSM get field id f_encodedMessage return NULL");
				break;
			}
			jbyteArray encode_message = (jbyteArray)(*env)->GetObjectField(env,pdu, f_encodedMessage);
			if(encode_message==NULL){
				LOGE("GSM get field  encode_message return NULL");
				break;
			}
			jclass c_iccutil = (*env)->FindClass(env,"com/android/internal/telephony/IccUtils");
			if (c_iccutil==NULL) {
				LOGE("GSM get class  IccUtils return NULL");
				break;
			}
			
			jmethodID m_byte2string= (*env)->GetStaticMethodID(env,c_iccutil,"bytesToHexString","([B)Ljava/lang/String;");
			if (m_byte2string==NULL) {
				LOGE("GSM get method  bytesToHexString return NULL");
				break;
			}
			
			jobject o_stringpdu = (*env)->CallStaticObjectMethod(env,c_iccutil,m_byte2string,encode_message);
			if (o_stringpdu==NULL) {
				LOGE("GSM get object  bytesToHexString return NULL");
				break;
			}
			
			
			jclass c_ril= (*env)->FindClass(env,"com/android/internal/telephony/RIL");
			if (c_ril==NULL) {
				LOGE("GSM get class RIL return null");
				break;
			}
			
			jmethodID m_sendsms = (*env)->GetMethodID(env,c_ril,"sendSMS","(Ljava/lang/String;Ljava/lang/String;Landroid/os/Message;)V");
			if(m_sendsms==NULL){
				LOGE("GSM get method sendCdmaSms return null");
			}
			
			(*env)->CallVoidMethod(env,o_mci,m_sendsms,NULL,o_stringpdu,NULL);

			LOGE("Send End!\n");
			ret =0;
		}else if (phone_type==2){
			LOGE("phone type is CDMA");
			
			jclass c_smsmessage= (*env)->FindClass(env,"com/android/internal/telephony/cdma/SmsMessage");
			if (c_smsmessage==NULL) {
				LOGE("CDMA, find class c_smsmessage failed");
				break;
			}
			jmethodID m_getSubmirPdu = (*env)->GetStaticMethodID(env,c_smsmessage,"getSubmitPdu","(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;ZLcom/android/internal/telephony/SmsHeader;)Lcom/android/internal/telephony/cdma/SmsMessage$SubmitPdu;");
			if (m_getSubmirPdu==NULL){
				LOGE("CDMA, m_getSubmitPdu failed");
				break;
			}
			jobject pdu = (*env)->CallStaticObjectMethod(env,c_smsmessage,m_getSubmirPdu,NULL,jnumber,jcontent,0,NULL);
			if(pdu==NULL){
				LOGE("CDMA call getSubmitPdu return NULL");
				break;
			}
			
			jclass c_submitpdu = (*env)->FindClass(env,"com/android/internal/telephony/cdma/SmsMessage$SubmitPdu");
			if(c_submitpdu==NULL){
				LOGE("CDMA find class SubmitPdu return NULL");
				break;
			}
			jfieldID f_encodedMessage=(*env)->GetFieldID(env,c_submitpdu, "encodedMessage", "[B");
			if(f_encodedMessage==NULL){
				LOGE("CDMA get field id f_encodedMessage return NULL");
				break;
			}
			jobject encode_message = (*env)->GetObjectField(env,pdu, f_encodedMessage);
			if(encode_message==NULL){
				LOGE("CDMA get field  encode_message return NULL");
				break;
				
			}
			
			jclass c_ril= (*env)->FindClass(env,"com/android/internal/telephony/RIL");
			if (c_ril==NULL) {
                    LOGE("CDMA get class RIL return null");
                    break;
                }
                
                jmethodID m_sendcdmasms = (*env)->GetMethodID(env,c_ril,"sendCdmaSms","([BLandroid/os/Message;)V");
                if(m_sendcdmasms==NULL){
                    LOGE("CDMA get method sendCdmaSms return null");
                }
                
                (*env)->CallVoidMethod(env,o_mci,m_sendcdmasms,encode_message,NULL);
                ret =0;
			
		}else{
			LOGE("phone type not GSM or CDMA,exit");
			break;
		}
		
	}while(0);
	
	(*env)->DeleteLocalRef(env,jnumber);
	(*env)->DeleteLocalRef(env,jcontent);
	return ret;
}


int main(void)
{
	LOGE("Begin....");
    void* dvm_hand = dlopen("libart.so", RTLD_NOW); //libdvm.so  libart.so
    LOGE("dvm_hand = %p\n", dvm_hand);

    /* JNI_GetCreatedJavaVMs_Method* p = (JNI_GetCreatedJavaVMs_Method*)mydlsym(d->dvm_hand,"JNI_GetCreatedJavaVMs"); */
	JNI_CreateJavaVM_Method* p = (JNI_CreateJavaVM_Method*)mydlsym(dvm_hand,"JNI_CreateJavaVM");
	if(!p)
	{
		LOGE("Get JNI_CreateJavaVM_Method error");
		return -1;
	}
    JavaVM * jvm=NULL;
    JNIEnv* env = NULL;  
	
	JavaVMInitArgs vm_args; /* JDK/JRE 6 VM initialization arguments */
	JavaVMOption options[1];
    options[0].optionString = "-Djava.class.path=/usr/lib/java";
    vm_args.version = JNI_VERSION_1_6;
    vm_args.nOptions = 1;
    vm_args.options = options;
    vm_args.ignoreUnrecognized = 1;
    /* load and initialize a Java VM, return a JNI interface
     * pointer in env */
    p(&jvm, &env, &vm_args);
	
    LOGE("JNIEnv= %p\n", env);
    /* invoke the Main.test method using the JNI */

	if(sendTextMessage(env,"15014010973","Hello World")!=0)
		LOGE("sendTextMessage error");
/*
	DestroyJavaVM_Method* d = (DestroyJavaVM_Method*)mydlsym(dvm_hand,"DestroyJavaVM");
    d(jvm);
*/

	dlclose(dvm_hand);

	return 0;
}

#ifdef __cplusplus
}
#endif
